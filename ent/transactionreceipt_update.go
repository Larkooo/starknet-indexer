// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tarrencev/starknet-indexer/ent/block"
	"github.com/tarrencev/starknet-indexer/ent/predicate"
	"github.com/tarrencev/starknet-indexer/ent/schema"
	"github.com/tarrencev/starknet-indexer/ent/transaction"
	"github.com/tarrencev/starknet-indexer/ent/transactionreceipt"
)

// TransactionReceiptUpdate is the builder for updating TransactionReceipt entities.
type TransactionReceiptUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionReceiptMutation
}

// Where appends a list predicates to the TransactionReceiptUpdate builder.
func (tru *TransactionReceiptUpdate) Where(ps ...predicate.TransactionReceipt) *TransactionReceiptUpdate {
	tru.mutation.Where(ps...)
	return tru
}

// SetTransactionIndex sets the "transaction_index" field.
func (tru *TransactionReceiptUpdate) SetTransactionIndex(i int32) *TransactionReceiptUpdate {
	tru.mutation.ResetTransactionIndex()
	tru.mutation.SetTransactionIndex(i)
	return tru
}

// AddTransactionIndex adds i to the "transaction_index" field.
func (tru *TransactionReceiptUpdate) AddTransactionIndex(i int32) *TransactionReceiptUpdate {
	tru.mutation.AddTransactionIndex(i)
	return tru
}

// SetTransactionHash sets the "transaction_hash" field.
func (tru *TransactionReceiptUpdate) SetTransactionHash(s string) *TransactionReceiptUpdate {
	tru.mutation.SetTransactionHash(s)
	return tru
}

// SetL1ToL2ConsumedMessage sets the "l1_to_l2_consumed_message" field.
func (tru *TransactionReceiptUpdate) SetL1ToL2ConsumedMessage(slm schema.L1ToL2ConsumedMessage) *TransactionReceiptUpdate {
	tru.mutation.SetL1ToL2ConsumedMessage(slm)
	return tru
}

// SetExecutionResources sets the "execution_resources" field.
func (tru *TransactionReceiptUpdate) SetExecutionResources(sr schema.ExecutionResources) *TransactionReceiptUpdate {
	tru.mutation.SetExecutionResources(sr)
	return tru
}

// SetEvents sets the "events" field.
func (tru *TransactionReceiptUpdate) SetEvents(jm json.RawMessage) *TransactionReceiptUpdate {
	tru.mutation.SetEvents(jm)
	return tru
}

// SetL2ToL1Messages sets the "l2_to_l1_messages" field.
func (tru *TransactionReceiptUpdate) SetL2ToL1Messages(jm json.RawMessage) *TransactionReceiptUpdate {
	tru.mutation.SetL2ToL1Messages(jm)
	return tru
}

// SetBlockID sets the "block" edge to the Block entity by ID.
func (tru *TransactionReceiptUpdate) SetBlockID(id string) *TransactionReceiptUpdate {
	tru.mutation.SetBlockID(id)
	return tru
}

// SetNillableBlockID sets the "block" edge to the Block entity by ID if the given value is not nil.
func (tru *TransactionReceiptUpdate) SetNillableBlockID(id *string) *TransactionReceiptUpdate {
	if id != nil {
		tru = tru.SetBlockID(*id)
	}
	return tru
}

// SetBlock sets the "block" edge to the Block entity.
func (tru *TransactionReceiptUpdate) SetBlock(b *Block) *TransactionReceiptUpdate {
	return tru.SetBlockID(b.ID)
}

// SetTransactionID sets the "transaction" edge to the Transaction entity by ID.
func (tru *TransactionReceiptUpdate) SetTransactionID(id string) *TransactionReceiptUpdate {
	tru.mutation.SetTransactionID(id)
	return tru
}

// SetNillableTransactionID sets the "transaction" edge to the Transaction entity by ID if the given value is not nil.
func (tru *TransactionReceiptUpdate) SetNillableTransactionID(id *string) *TransactionReceiptUpdate {
	if id != nil {
		tru = tru.SetTransactionID(*id)
	}
	return tru
}

// SetTransaction sets the "transaction" edge to the Transaction entity.
func (tru *TransactionReceiptUpdate) SetTransaction(t *Transaction) *TransactionReceiptUpdate {
	return tru.SetTransactionID(t.ID)
}

// Mutation returns the TransactionReceiptMutation object of the builder.
func (tru *TransactionReceiptUpdate) Mutation() *TransactionReceiptMutation {
	return tru.mutation
}

// ClearBlock clears the "block" edge to the Block entity.
func (tru *TransactionReceiptUpdate) ClearBlock() *TransactionReceiptUpdate {
	tru.mutation.ClearBlock()
	return tru
}

// ClearTransaction clears the "transaction" edge to the Transaction entity.
func (tru *TransactionReceiptUpdate) ClearTransaction() *TransactionReceiptUpdate {
	tru.mutation.ClearTransaction()
	return tru
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tru *TransactionReceiptUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tru.hooks) == 0 {
		affected, err = tru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionReceiptMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tru.mutation = mutation
			affected, err = tru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tru.hooks) - 1; i >= 0; i-- {
			if tru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tru *TransactionReceiptUpdate) SaveX(ctx context.Context) int {
	affected, err := tru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tru *TransactionReceiptUpdate) Exec(ctx context.Context) error {
	_, err := tru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tru *TransactionReceiptUpdate) ExecX(ctx context.Context) {
	if err := tru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tru *TransactionReceiptUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transactionreceipt.Table,
			Columns: transactionreceipt.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: transactionreceipt.FieldID,
			},
		},
	}
	if ps := tru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tru.mutation.TransactionIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: transactionreceipt.FieldTransactionIndex,
		})
	}
	if value, ok := tru.mutation.AddedTransactionIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: transactionreceipt.FieldTransactionIndex,
		})
	}
	if value, ok := tru.mutation.TransactionHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactionreceipt.FieldTransactionHash,
		})
	}
	if value, ok := tru.mutation.L1ToL2ConsumedMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: transactionreceipt.FieldL1ToL2ConsumedMessage,
		})
	}
	if value, ok := tru.mutation.ExecutionResources(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: transactionreceipt.FieldExecutionResources,
		})
	}
	if value, ok := tru.mutation.Events(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: transactionreceipt.FieldEvents,
		})
	}
	if value, ok := tru.mutation.L2ToL1Messages(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: transactionreceipt.FieldL2ToL1Messages,
		})
	}
	if tru.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionreceipt.BlockTable,
			Columns: []string{transactionreceipt.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: block.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionreceipt.BlockTable,
			Columns: []string{transactionreceipt.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tru.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transactionreceipt.TransactionTable,
			Columns: []string{transactionreceipt.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tru.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transactionreceipt.TransactionTable,
			Columns: []string{transactionreceipt.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactionreceipt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TransactionReceiptUpdateOne is the builder for updating a single TransactionReceipt entity.
type TransactionReceiptUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionReceiptMutation
}

// SetTransactionIndex sets the "transaction_index" field.
func (truo *TransactionReceiptUpdateOne) SetTransactionIndex(i int32) *TransactionReceiptUpdateOne {
	truo.mutation.ResetTransactionIndex()
	truo.mutation.SetTransactionIndex(i)
	return truo
}

// AddTransactionIndex adds i to the "transaction_index" field.
func (truo *TransactionReceiptUpdateOne) AddTransactionIndex(i int32) *TransactionReceiptUpdateOne {
	truo.mutation.AddTransactionIndex(i)
	return truo
}

// SetTransactionHash sets the "transaction_hash" field.
func (truo *TransactionReceiptUpdateOne) SetTransactionHash(s string) *TransactionReceiptUpdateOne {
	truo.mutation.SetTransactionHash(s)
	return truo
}

// SetL1ToL2ConsumedMessage sets the "l1_to_l2_consumed_message" field.
func (truo *TransactionReceiptUpdateOne) SetL1ToL2ConsumedMessage(slm schema.L1ToL2ConsumedMessage) *TransactionReceiptUpdateOne {
	truo.mutation.SetL1ToL2ConsumedMessage(slm)
	return truo
}

// SetExecutionResources sets the "execution_resources" field.
func (truo *TransactionReceiptUpdateOne) SetExecutionResources(sr schema.ExecutionResources) *TransactionReceiptUpdateOne {
	truo.mutation.SetExecutionResources(sr)
	return truo
}

// SetEvents sets the "events" field.
func (truo *TransactionReceiptUpdateOne) SetEvents(jm json.RawMessage) *TransactionReceiptUpdateOne {
	truo.mutation.SetEvents(jm)
	return truo
}

// SetL2ToL1Messages sets the "l2_to_l1_messages" field.
func (truo *TransactionReceiptUpdateOne) SetL2ToL1Messages(jm json.RawMessage) *TransactionReceiptUpdateOne {
	truo.mutation.SetL2ToL1Messages(jm)
	return truo
}

// SetBlockID sets the "block" edge to the Block entity by ID.
func (truo *TransactionReceiptUpdateOne) SetBlockID(id string) *TransactionReceiptUpdateOne {
	truo.mutation.SetBlockID(id)
	return truo
}

// SetNillableBlockID sets the "block" edge to the Block entity by ID if the given value is not nil.
func (truo *TransactionReceiptUpdateOne) SetNillableBlockID(id *string) *TransactionReceiptUpdateOne {
	if id != nil {
		truo = truo.SetBlockID(*id)
	}
	return truo
}

// SetBlock sets the "block" edge to the Block entity.
func (truo *TransactionReceiptUpdateOne) SetBlock(b *Block) *TransactionReceiptUpdateOne {
	return truo.SetBlockID(b.ID)
}

// SetTransactionID sets the "transaction" edge to the Transaction entity by ID.
func (truo *TransactionReceiptUpdateOne) SetTransactionID(id string) *TransactionReceiptUpdateOne {
	truo.mutation.SetTransactionID(id)
	return truo
}

// SetNillableTransactionID sets the "transaction" edge to the Transaction entity by ID if the given value is not nil.
func (truo *TransactionReceiptUpdateOne) SetNillableTransactionID(id *string) *TransactionReceiptUpdateOne {
	if id != nil {
		truo = truo.SetTransactionID(*id)
	}
	return truo
}

// SetTransaction sets the "transaction" edge to the Transaction entity.
func (truo *TransactionReceiptUpdateOne) SetTransaction(t *Transaction) *TransactionReceiptUpdateOne {
	return truo.SetTransactionID(t.ID)
}

// Mutation returns the TransactionReceiptMutation object of the builder.
func (truo *TransactionReceiptUpdateOne) Mutation() *TransactionReceiptMutation {
	return truo.mutation
}

// ClearBlock clears the "block" edge to the Block entity.
func (truo *TransactionReceiptUpdateOne) ClearBlock() *TransactionReceiptUpdateOne {
	truo.mutation.ClearBlock()
	return truo
}

// ClearTransaction clears the "transaction" edge to the Transaction entity.
func (truo *TransactionReceiptUpdateOne) ClearTransaction() *TransactionReceiptUpdateOne {
	truo.mutation.ClearTransaction()
	return truo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (truo *TransactionReceiptUpdateOne) Select(field string, fields ...string) *TransactionReceiptUpdateOne {
	truo.fields = append([]string{field}, fields...)
	return truo
}

// Save executes the query and returns the updated TransactionReceipt entity.
func (truo *TransactionReceiptUpdateOne) Save(ctx context.Context) (*TransactionReceipt, error) {
	var (
		err  error
		node *TransactionReceipt
	)
	if len(truo.hooks) == 0 {
		node, err = truo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionReceiptMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			truo.mutation = mutation
			node, err = truo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(truo.hooks) - 1; i >= 0; i-- {
			if truo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = truo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, truo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (truo *TransactionReceiptUpdateOne) SaveX(ctx context.Context) *TransactionReceipt {
	node, err := truo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (truo *TransactionReceiptUpdateOne) Exec(ctx context.Context) error {
	_, err := truo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (truo *TransactionReceiptUpdateOne) ExecX(ctx context.Context) {
	if err := truo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (truo *TransactionReceiptUpdateOne) sqlSave(ctx context.Context) (_node *TransactionReceipt, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transactionreceipt.Table,
			Columns: transactionreceipt.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: transactionreceipt.FieldID,
			},
		},
	}
	id, ok := truo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "TransactionReceipt.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := truo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transactionreceipt.FieldID)
		for _, f := range fields {
			if !transactionreceipt.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transactionreceipt.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := truo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := truo.mutation.TransactionIndex(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: transactionreceipt.FieldTransactionIndex,
		})
	}
	if value, ok := truo.mutation.AddedTransactionIndex(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: transactionreceipt.FieldTransactionIndex,
		})
	}
	if value, ok := truo.mutation.TransactionHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transactionreceipt.FieldTransactionHash,
		})
	}
	if value, ok := truo.mutation.L1ToL2ConsumedMessage(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: transactionreceipt.FieldL1ToL2ConsumedMessage,
		})
	}
	if value, ok := truo.mutation.ExecutionResources(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: transactionreceipt.FieldExecutionResources,
		})
	}
	if value, ok := truo.mutation.Events(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: transactionreceipt.FieldEvents,
		})
	}
	if value, ok := truo.mutation.L2ToL1Messages(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: transactionreceipt.FieldL2ToL1Messages,
		})
	}
	if truo.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionreceipt.BlockTable,
			Columns: []string{transactionreceipt.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: block.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transactionreceipt.BlockTable,
			Columns: []string{transactionreceipt.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if truo.mutation.TransactionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transactionreceipt.TransactionTable,
			Columns: []string{transactionreceipt.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transaction.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := truo.mutation.TransactionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   transactionreceipt.TransactionTable,
			Columns: []string{transactionreceipt.TransactionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transaction.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &TransactionReceipt{config: truo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, truo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transactionreceipt.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
