// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tarrencev/starknet-indexer/ent/syncstate"
)

// SyncStateCreate is the builder for creating a SyncState entity.
type SyncStateCreate struct {
	config
	mutation *SyncStateMutation
	hooks    []Hook
}

// SetStartBlock sets the "start_block" field.
func (ssc *SyncStateCreate) SetStartBlock(u uint64) *SyncStateCreate {
	ssc.mutation.SetStartBlock(u)
	return ssc
}

// SetID sets the "id" field.
func (ssc *SyncStateCreate) SetID(s string) *SyncStateCreate {
	ssc.mutation.SetID(s)
	return ssc
}

// Mutation returns the SyncStateMutation object of the builder.
func (ssc *SyncStateCreate) Mutation() *SyncStateMutation {
	return ssc.mutation
}

// Save creates the SyncState in the database.
func (ssc *SyncStateCreate) Save(ctx context.Context) (*SyncState, error) {
	var (
		err  error
		node *SyncState
	)
	if len(ssc.hooks) == 0 {
		if err = ssc.check(); err != nil {
			return nil, err
		}
		node, err = ssc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SyncStateMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ssc.check(); err != nil {
				return nil, err
			}
			ssc.mutation = mutation
			if node, err = ssc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ssc.hooks) - 1; i >= 0; i-- {
			if ssc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ssc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ssc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ssc *SyncStateCreate) SaveX(ctx context.Context) *SyncState {
	v, err := ssc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ssc *SyncStateCreate) Exec(ctx context.Context) error {
	_, err := ssc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ssc *SyncStateCreate) ExecX(ctx context.Context) {
	if err := ssc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ssc *SyncStateCreate) check() error {
	if _, ok := ssc.mutation.StartBlock(); !ok {
		return &ValidationError{Name: "start_block", err: errors.New(`ent: missing required field "SyncState.start_block"`)}
	}
	return nil
}

func (ssc *SyncStateCreate) sqlSave(ctx context.Context) (*SyncState, error) {
	_node, _spec := ssc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ssc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SyncState.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (ssc *SyncStateCreate) createSpec() (*SyncState, *sqlgraph.CreateSpec) {
	var (
		_node = &SyncState{config: ssc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: syncstate.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: syncstate.FieldID,
			},
		}
	)
	if id, ok := ssc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ssc.mutation.StartBlock(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: syncstate.FieldStartBlock,
		})
		_node.StartBlock = value
	}
	return _node, _spec
}

// SyncStateCreateBulk is the builder for creating many SyncState entities in bulk.
type SyncStateCreateBulk struct {
	config
	builders []*SyncStateCreate
}

// Save creates the SyncState entities in the database.
func (sscb *SyncStateCreateBulk) Save(ctx context.Context) ([]*SyncState, error) {
	specs := make([]*sqlgraph.CreateSpec, len(sscb.builders))
	nodes := make([]*SyncState, len(sscb.builders))
	mutators := make([]Mutator, len(sscb.builders))
	for i := range sscb.builders {
		func(i int, root context.Context) {
			builder := sscb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SyncStateMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sscb *SyncStateCreateBulk) SaveX(ctx context.Context) []*SyncState {
	v, err := sscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sscb *SyncStateCreateBulk) Exec(ctx context.Context) error {
	_, err := sscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sscb *SyncStateCreateBulk) ExecX(ctx context.Context) {
	if err := sscb.Exec(ctx); err != nil {
		panic(err)
	}
}
