// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/tarrencev/starknet-indexer/ent/block"
	"github.com/tarrencev/starknet-indexer/ent/contract"
	"github.com/tarrencev/starknet-indexer/ent/event"
	"github.com/tarrencev/starknet-indexer/ent/predicate"
	"github.com/tarrencev/starknet-indexer/ent/transaction"
	"github.com/tarrencev/starknet-indexer/ent/transactionreceipt"
)

// TransactionUpdate is the builder for updating Transaction entities.
type TransactionUpdate struct {
	config
	hooks    []Hook
	mutation *TransactionMutation
}

// Where appends a list predicates to the TransactionUpdate builder.
func (tu *TransactionUpdate) Where(ps ...predicate.Transaction) *TransactionUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetContractAddress sets the "contract_address" field.
func (tu *TransactionUpdate) SetContractAddress(s string) *TransactionUpdate {
	tu.mutation.SetContractAddress(s)
	return tu
}

// SetEntryPointSelector sets the "entry_point_selector" field.
func (tu *TransactionUpdate) SetEntryPointSelector(s string) *TransactionUpdate {
	tu.mutation.SetEntryPointSelector(s)
	return tu
}

// SetNillableEntryPointSelector sets the "entry_point_selector" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableEntryPointSelector(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetEntryPointSelector(*s)
	}
	return tu
}

// ClearEntryPointSelector clears the value of the "entry_point_selector" field.
func (tu *TransactionUpdate) ClearEntryPointSelector() *TransactionUpdate {
	tu.mutation.ClearEntryPointSelector()
	return tu
}

// SetTransactionHash sets the "transaction_hash" field.
func (tu *TransactionUpdate) SetTransactionHash(s string) *TransactionUpdate {
	tu.mutation.SetTransactionHash(s)
	return tu
}

// SetCalldata sets the "calldata" field.
func (tu *TransactionUpdate) SetCalldata(s []string) *TransactionUpdate {
	tu.mutation.SetCalldata(s)
	return tu
}

// SetSignature sets the "signature" field.
func (tu *TransactionUpdate) SetSignature(s []string) *TransactionUpdate {
	tu.mutation.SetSignature(s)
	return tu
}

// ClearSignature clears the value of the "signature" field.
func (tu *TransactionUpdate) ClearSignature() *TransactionUpdate {
	tu.mutation.ClearSignature()
	return tu
}

// SetNonce sets the "nonce" field.
func (tu *TransactionUpdate) SetNonce(s string) *TransactionUpdate {
	tu.mutation.SetNonce(s)
	return tu
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (tu *TransactionUpdate) SetNillableNonce(s *string) *TransactionUpdate {
	if s != nil {
		tu.SetNonce(*s)
	}
	return tu
}

// ClearNonce clears the value of the "nonce" field.
func (tu *TransactionUpdate) ClearNonce() *TransactionUpdate {
	tu.mutation.ClearNonce()
	return tu
}

// SetBlockID sets the "block" edge to the Block entity by ID.
func (tu *TransactionUpdate) SetBlockID(id string) *TransactionUpdate {
	tu.mutation.SetBlockID(id)
	return tu
}

// SetNillableBlockID sets the "block" edge to the Block entity by ID if the given value is not nil.
func (tu *TransactionUpdate) SetNillableBlockID(id *string) *TransactionUpdate {
	if id != nil {
		tu = tu.SetBlockID(*id)
	}
	return tu
}

// SetBlock sets the "block" edge to the Block entity.
func (tu *TransactionUpdate) SetBlock(b *Block) *TransactionUpdate {
	return tu.SetBlockID(b.ID)
}

// AddContractIDs adds the "contract" edge to the Contract entity by IDs.
func (tu *TransactionUpdate) AddContractIDs(ids ...string) *TransactionUpdate {
	tu.mutation.AddContractIDs(ids...)
	return tu
}

// AddContract adds the "contract" edges to the Contract entity.
func (tu *TransactionUpdate) AddContract(c ...*Contract) *TransactionUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.AddContractIDs(ids...)
}

// SetReceiptsID sets the "receipts" edge to the TransactionReceipt entity by ID.
func (tu *TransactionUpdate) SetReceiptsID(id string) *TransactionUpdate {
	tu.mutation.SetReceiptsID(id)
	return tu
}

// SetNillableReceiptsID sets the "receipts" edge to the TransactionReceipt entity by ID if the given value is not nil.
func (tu *TransactionUpdate) SetNillableReceiptsID(id *string) *TransactionUpdate {
	if id != nil {
		tu = tu.SetReceiptsID(*id)
	}
	return tu
}

// SetReceipts sets the "receipts" edge to the TransactionReceipt entity.
func (tu *TransactionUpdate) SetReceipts(t *TransactionReceipt) *TransactionUpdate {
	return tu.SetReceiptsID(t.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (tu *TransactionUpdate) AddEventIDs(ids ...string) *TransactionUpdate {
	tu.mutation.AddEventIDs(ids...)
	return tu
}

// AddEvents adds the "events" edges to the Event entity.
func (tu *TransactionUpdate) AddEvents(e ...*Event) *TransactionUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tu.AddEventIDs(ids...)
}

// Mutation returns the TransactionMutation object of the builder.
func (tu *TransactionUpdate) Mutation() *TransactionMutation {
	return tu.mutation
}

// ClearBlock clears the "block" edge to the Block entity.
func (tu *TransactionUpdate) ClearBlock() *TransactionUpdate {
	tu.mutation.ClearBlock()
	return tu
}

// ClearContract clears all "contract" edges to the Contract entity.
func (tu *TransactionUpdate) ClearContract() *TransactionUpdate {
	tu.mutation.ClearContract()
	return tu
}

// RemoveContractIDs removes the "contract" edge to Contract entities by IDs.
func (tu *TransactionUpdate) RemoveContractIDs(ids ...string) *TransactionUpdate {
	tu.mutation.RemoveContractIDs(ids...)
	return tu
}

// RemoveContract removes "contract" edges to Contract entities.
func (tu *TransactionUpdate) RemoveContract(c ...*Contract) *TransactionUpdate {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.RemoveContractIDs(ids...)
}

// ClearReceipts clears the "receipts" edge to the TransactionReceipt entity.
func (tu *TransactionUpdate) ClearReceipts() *TransactionUpdate {
	tu.mutation.ClearReceipts()
	return tu
}

// ClearEvents clears all "events" edges to the Event entity.
func (tu *TransactionUpdate) ClearEvents() *TransactionUpdate {
	tu.mutation.ClearEvents()
	return tu
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (tu *TransactionUpdate) RemoveEventIDs(ids ...string) *TransactionUpdate {
	tu.mutation.RemoveEventIDs(ids...)
	return tu
}

// RemoveEvents removes "events" edges to Event entities.
func (tu *TransactionUpdate) RemoveEvents(e ...*Event) *TransactionUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tu.RemoveEventIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TransactionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TransactionUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TransactionUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TransactionUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TransactionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transaction.Table,
			Columns: transaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: transaction.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.ContractAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldContractAddress,
		})
	}
	if value, ok := tu.mutation.EntryPointSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldEntryPointSelector,
		})
	}
	if tu.mutation.EntryPointSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: transaction.FieldEntryPointSelector,
		})
	}
	if value, ok := tu.mutation.TransactionHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldTransactionHash,
		})
	}
	if value, ok := tu.mutation.Calldata(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: transaction.FieldCalldata,
		})
	}
	if value, ok := tu.mutation.Signature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: transaction.FieldSignature,
		})
	}
	if tu.mutation.SignatureCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: transaction.FieldSignature,
		})
	}
	if value, ok := tu.mutation.Nonce(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldNonce,
		})
	}
	if tu.mutation.NonceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: transaction.FieldNonce,
		})
	}
	if tu.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.BlockTable,
			Columns: []string{transaction.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: block.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.BlockTable,
			Columns: []string{transaction.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   transaction.ContractTable,
			Columns: transaction.ContractPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: contract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedContractIDs(); len(nodes) > 0 && !tu.mutation.ContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   transaction.ContractTable,
			Columns: transaction.ContractPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: contract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ContractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   transaction.ContractTable,
			Columns: transaction.ContractPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: contract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ReceiptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   transaction.ReceiptsTable,
			Columns: []string{transaction.ReceiptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transactionreceipt.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ReceiptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   transaction.ReceiptsTable,
			Columns: []string{transaction.ReceiptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transactionreceipt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.EventsTable,
			Columns: []string{transaction.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedEventsIDs(); len(nodes) > 0 && !tu.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.EventsTable,
			Columns: []string{transaction.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.EventsTable,
			Columns: []string{transaction.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TransactionUpdateOne is the builder for updating a single Transaction entity.
type TransactionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TransactionMutation
}

// SetContractAddress sets the "contract_address" field.
func (tuo *TransactionUpdateOne) SetContractAddress(s string) *TransactionUpdateOne {
	tuo.mutation.SetContractAddress(s)
	return tuo
}

// SetEntryPointSelector sets the "entry_point_selector" field.
func (tuo *TransactionUpdateOne) SetEntryPointSelector(s string) *TransactionUpdateOne {
	tuo.mutation.SetEntryPointSelector(s)
	return tuo
}

// SetNillableEntryPointSelector sets the "entry_point_selector" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableEntryPointSelector(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetEntryPointSelector(*s)
	}
	return tuo
}

// ClearEntryPointSelector clears the value of the "entry_point_selector" field.
func (tuo *TransactionUpdateOne) ClearEntryPointSelector() *TransactionUpdateOne {
	tuo.mutation.ClearEntryPointSelector()
	return tuo
}

// SetTransactionHash sets the "transaction_hash" field.
func (tuo *TransactionUpdateOne) SetTransactionHash(s string) *TransactionUpdateOne {
	tuo.mutation.SetTransactionHash(s)
	return tuo
}

// SetCalldata sets the "calldata" field.
func (tuo *TransactionUpdateOne) SetCalldata(s []string) *TransactionUpdateOne {
	tuo.mutation.SetCalldata(s)
	return tuo
}

// SetSignature sets the "signature" field.
func (tuo *TransactionUpdateOne) SetSignature(s []string) *TransactionUpdateOne {
	tuo.mutation.SetSignature(s)
	return tuo
}

// ClearSignature clears the value of the "signature" field.
func (tuo *TransactionUpdateOne) ClearSignature() *TransactionUpdateOne {
	tuo.mutation.ClearSignature()
	return tuo
}

// SetNonce sets the "nonce" field.
func (tuo *TransactionUpdateOne) SetNonce(s string) *TransactionUpdateOne {
	tuo.mutation.SetNonce(s)
	return tuo
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableNonce(s *string) *TransactionUpdateOne {
	if s != nil {
		tuo.SetNonce(*s)
	}
	return tuo
}

// ClearNonce clears the value of the "nonce" field.
func (tuo *TransactionUpdateOne) ClearNonce() *TransactionUpdateOne {
	tuo.mutation.ClearNonce()
	return tuo
}

// SetBlockID sets the "block" edge to the Block entity by ID.
func (tuo *TransactionUpdateOne) SetBlockID(id string) *TransactionUpdateOne {
	tuo.mutation.SetBlockID(id)
	return tuo
}

// SetNillableBlockID sets the "block" edge to the Block entity by ID if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableBlockID(id *string) *TransactionUpdateOne {
	if id != nil {
		tuo = tuo.SetBlockID(*id)
	}
	return tuo
}

// SetBlock sets the "block" edge to the Block entity.
func (tuo *TransactionUpdateOne) SetBlock(b *Block) *TransactionUpdateOne {
	return tuo.SetBlockID(b.ID)
}

// AddContractIDs adds the "contract" edge to the Contract entity by IDs.
func (tuo *TransactionUpdateOne) AddContractIDs(ids ...string) *TransactionUpdateOne {
	tuo.mutation.AddContractIDs(ids...)
	return tuo
}

// AddContract adds the "contract" edges to the Contract entity.
func (tuo *TransactionUpdateOne) AddContract(c ...*Contract) *TransactionUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.AddContractIDs(ids...)
}

// SetReceiptsID sets the "receipts" edge to the TransactionReceipt entity by ID.
func (tuo *TransactionUpdateOne) SetReceiptsID(id string) *TransactionUpdateOne {
	tuo.mutation.SetReceiptsID(id)
	return tuo
}

// SetNillableReceiptsID sets the "receipts" edge to the TransactionReceipt entity by ID if the given value is not nil.
func (tuo *TransactionUpdateOne) SetNillableReceiptsID(id *string) *TransactionUpdateOne {
	if id != nil {
		tuo = tuo.SetReceiptsID(*id)
	}
	return tuo
}

// SetReceipts sets the "receipts" edge to the TransactionReceipt entity.
func (tuo *TransactionUpdateOne) SetReceipts(t *TransactionReceipt) *TransactionUpdateOne {
	return tuo.SetReceiptsID(t.ID)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (tuo *TransactionUpdateOne) AddEventIDs(ids ...string) *TransactionUpdateOne {
	tuo.mutation.AddEventIDs(ids...)
	return tuo
}

// AddEvents adds the "events" edges to the Event entity.
func (tuo *TransactionUpdateOne) AddEvents(e ...*Event) *TransactionUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tuo.AddEventIDs(ids...)
}

// Mutation returns the TransactionMutation object of the builder.
func (tuo *TransactionUpdateOne) Mutation() *TransactionMutation {
	return tuo.mutation
}

// ClearBlock clears the "block" edge to the Block entity.
func (tuo *TransactionUpdateOne) ClearBlock() *TransactionUpdateOne {
	tuo.mutation.ClearBlock()
	return tuo
}

// ClearContract clears all "contract" edges to the Contract entity.
func (tuo *TransactionUpdateOne) ClearContract() *TransactionUpdateOne {
	tuo.mutation.ClearContract()
	return tuo
}

// RemoveContractIDs removes the "contract" edge to Contract entities by IDs.
func (tuo *TransactionUpdateOne) RemoveContractIDs(ids ...string) *TransactionUpdateOne {
	tuo.mutation.RemoveContractIDs(ids...)
	return tuo
}

// RemoveContract removes "contract" edges to Contract entities.
func (tuo *TransactionUpdateOne) RemoveContract(c ...*Contract) *TransactionUpdateOne {
	ids := make([]string, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.RemoveContractIDs(ids...)
}

// ClearReceipts clears the "receipts" edge to the TransactionReceipt entity.
func (tuo *TransactionUpdateOne) ClearReceipts() *TransactionUpdateOne {
	tuo.mutation.ClearReceipts()
	return tuo
}

// ClearEvents clears all "events" edges to the Event entity.
func (tuo *TransactionUpdateOne) ClearEvents() *TransactionUpdateOne {
	tuo.mutation.ClearEvents()
	return tuo
}

// RemoveEventIDs removes the "events" edge to Event entities by IDs.
func (tuo *TransactionUpdateOne) RemoveEventIDs(ids ...string) *TransactionUpdateOne {
	tuo.mutation.RemoveEventIDs(ids...)
	return tuo
}

// RemoveEvents removes "events" edges to Event entities.
func (tuo *TransactionUpdateOne) RemoveEvents(e ...*Event) *TransactionUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return tuo.RemoveEventIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TransactionUpdateOne) Select(field string, fields ...string) *TransactionUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Transaction entity.
func (tuo *TransactionUpdateOne) Save(ctx context.Context) (*Transaction, error) {
	var (
		err  error
		node *Transaction
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TransactionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TransactionUpdateOne) SaveX(ctx context.Context) *Transaction {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TransactionUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TransactionUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TransactionUpdateOne) sqlSave(ctx context.Context) (_node *Transaction, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   transaction.Table,
			Columns: transaction.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: transaction.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Transaction.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, transaction.FieldID)
		for _, f := range fields {
			if !transaction.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != transaction.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.ContractAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldContractAddress,
		})
	}
	if value, ok := tuo.mutation.EntryPointSelector(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldEntryPointSelector,
		})
	}
	if tuo.mutation.EntryPointSelectorCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: transaction.FieldEntryPointSelector,
		})
	}
	if value, ok := tuo.mutation.TransactionHash(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldTransactionHash,
		})
	}
	if value, ok := tuo.mutation.Calldata(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: transaction.FieldCalldata,
		})
	}
	if value, ok := tuo.mutation.Signature(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: transaction.FieldSignature,
		})
	}
	if tuo.mutation.SignatureCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Column: transaction.FieldSignature,
		})
	}
	if value, ok := tuo.mutation.Nonce(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: transaction.FieldNonce,
		})
	}
	if tuo.mutation.NonceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: transaction.FieldNonce,
		})
	}
	if tuo.mutation.BlockCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.BlockTable,
			Columns: []string{transaction.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: block.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.BlockIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   transaction.BlockTable,
			Columns: []string{transaction.BlockColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: block.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   transaction.ContractTable,
			Columns: transaction.ContractPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: contract.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedContractIDs(); len(nodes) > 0 && !tuo.mutation.ContractCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   transaction.ContractTable,
			Columns: transaction.ContractPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: contract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ContractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   transaction.ContractTable,
			Columns: transaction.ContractPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: contract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ReceiptsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   transaction.ReceiptsTable,
			Columns: []string{transaction.ReceiptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transactionreceipt.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ReceiptsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   transaction.ReceiptsTable,
			Columns: []string{transaction.ReceiptsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: transactionreceipt.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.EventsTable,
			Columns: []string{transaction.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: event.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedEventsIDs(); len(nodes) > 0 && !tuo.mutation.EventsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.EventsTable,
			Columns: []string{transaction.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   transaction.EventsTable,
			Columns: []string{transaction.EventsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: event.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Transaction{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{transaction.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
