// Code generated by entc, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateBlockInput represents a mutation input for creating blocks.
type CreateBlockInput struct {
	BlockHash       string
	ParentBlockHash string
	BlockNumber     uint64
	StateRoot       string
	Status          string
	Timestamp       time.Time
}

// Mutate applies the CreateBlockInput on the BlockCreate builder.
func (i *CreateBlockInput) Mutate(m *BlockCreate) {
	m.SetBlockHash(i.BlockHash)
	m.SetParentBlockHash(i.ParentBlockHash)
	m.SetBlockNumber(i.BlockNumber)
	m.SetStateRoot(i.StateRoot)
	m.SetStatus(i.Status)
	m.SetTimestamp(i.Timestamp)
}

// SetInput applies the change-set in the CreateBlockInput on the create builder.
func (c *BlockCreate) SetInput(i CreateBlockInput) *BlockCreate {
	i.Mutate(c)
	return c
}

// UpdateBlockInput represents a mutation input for updating blocks.
type UpdateBlockInput struct {
	BlockHash       *string
	ParentBlockHash *string
	BlockNumber     *uint64
	StateRoot       *string
	Status          *string
}

// Mutate applies the UpdateBlockInput on the BlockMutation.
func (i *UpdateBlockInput) Mutate(m *BlockMutation) {
	if v := i.BlockHash; v != nil {
		m.SetBlockHash(*v)
	}
	if v := i.ParentBlockHash; v != nil {
		m.SetParentBlockHash(*v)
	}
	if v := i.BlockNumber; v != nil {
		m.SetBlockNumber(*v)
	}
	if v := i.StateRoot; v != nil {
		m.SetStateRoot(*v)
	}
	if v := i.Status; v != nil {
		m.SetStatus(*v)
	}
}

// SetInput applies the change-set in the UpdateBlockInput on the update builder.
func (u *BlockUpdate) SetInput(i UpdateBlockInput) *BlockUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateBlockInput on the update-one builder.
func (u *BlockUpdateOne) SetInput(i UpdateBlockInput) *BlockUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
