// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/cartridge-gg/starknet-indexer/ent/balance"
	"github.com/cartridge-gg/starknet-indexer/ent/contract"
	"github.com/cartridge-gg/starknet-indexer/ent/schema/big"
)

// BalanceCreate is the builder for creating a Balance entity.
type BalanceCreate struct {
	config
	mutation *BalanceMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetBalance sets the "balance" field.
func (bc *BalanceCreate) SetBalance(b big.Int) *BalanceCreate {
	bc.mutation.SetBalance(b)
	return bc
}

// SetNillableBalance sets the "balance" field if the given value is not nil.
func (bc *BalanceCreate) SetNillableBalance(b *big.Int) *BalanceCreate {
	if b != nil {
		bc.SetBalance(*b)
	}
	return bc
}

// SetID sets the "id" field.
func (bc *BalanceCreate) SetID(s string) *BalanceCreate {
	bc.mutation.SetID(s)
	return bc
}

// SetAccountID sets the "account" edge to the Contract entity by ID.
func (bc *BalanceCreate) SetAccountID(id string) *BalanceCreate {
	bc.mutation.SetAccountID(id)
	return bc
}

// SetNillableAccountID sets the "account" edge to the Contract entity by ID if the given value is not nil.
func (bc *BalanceCreate) SetNillableAccountID(id *string) *BalanceCreate {
	if id != nil {
		bc = bc.SetAccountID(*id)
	}
	return bc
}

// SetAccount sets the "account" edge to the Contract entity.
func (bc *BalanceCreate) SetAccount(c *Contract) *BalanceCreate {
	return bc.SetAccountID(c.ID)
}

// SetContractID sets the "contract" edge to the Contract entity by ID.
func (bc *BalanceCreate) SetContractID(id string) *BalanceCreate {
	bc.mutation.SetContractID(id)
	return bc
}

// SetNillableContractID sets the "contract" edge to the Contract entity by ID if the given value is not nil.
func (bc *BalanceCreate) SetNillableContractID(id *string) *BalanceCreate {
	if id != nil {
		bc = bc.SetContractID(*id)
	}
	return bc
}

// SetContract sets the "contract" edge to the Contract entity.
func (bc *BalanceCreate) SetContract(c *Contract) *BalanceCreate {
	return bc.SetContractID(c.ID)
}

// Mutation returns the BalanceMutation object of the builder.
func (bc *BalanceCreate) Mutation() *BalanceMutation {
	return bc.mutation
}

// Save creates the Balance in the database.
func (bc *BalanceCreate) Save(ctx context.Context) (*Balance, error) {
	var (
		err  error
		node *Balance
	)
	bc.defaults()
	if len(bc.hooks) == 0 {
		if err = bc.check(); err != nil {
			return nil, err
		}
		node, err = bc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*BalanceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = bc.check(); err != nil {
				return nil, err
			}
			bc.mutation = mutation
			if node, err = bc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(bc.hooks) - 1; i >= 0; i-- {
			if bc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = bc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, bc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Balance)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from BalanceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (bc *BalanceCreate) SaveX(ctx context.Context) *Balance {
	v, err := bc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bc *BalanceCreate) Exec(ctx context.Context) error {
	_, err := bc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bc *BalanceCreate) ExecX(ctx context.Context) {
	if err := bc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (bc *BalanceCreate) defaults() {
	if _, ok := bc.mutation.Balance(); !ok {
		v := balance.DefaultBalance()
		bc.mutation.SetBalance(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (bc *BalanceCreate) check() error {
	if _, ok := bc.mutation.Balance(); !ok {
		return &ValidationError{Name: "balance", err: errors.New(`ent: missing required field "Balance.balance"`)}
	}
	return nil
}

func (bc *BalanceCreate) sqlSave(ctx context.Context) (*Balance, error) {
	_node, _spec := bc.createSpec()
	if err := sqlgraph.CreateNode(ctx, bc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Balance.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (bc *BalanceCreate) createSpec() (*Balance, *sqlgraph.CreateSpec) {
	var (
		_node = &Balance{config: bc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: balance.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: balance.FieldID,
			},
		}
	)
	_spec.OnConflict = bc.conflict
	if id, ok := bc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := bc.mutation.Balance(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: balance.FieldBalance,
		})
		_node.Balance = value
	}
	if nodes := bc.mutation.AccountIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   balance.AccountTable,
			Columns: []string{balance.AccountColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: contract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.balance_account = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := bc.mutation.ContractIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   balance.ContractTable,
			Columns: []string{balance.ContractColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeString,
					Column: contract.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.balance_contract = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Balance.Create().
//		SetBalance(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BalanceUpsert) {
//			SetBalance(v+v).
//		}).
//		Exec(ctx)
//
func (bc *BalanceCreate) OnConflict(opts ...sql.ConflictOption) *BalanceUpsertOne {
	bc.conflict = opts
	return &BalanceUpsertOne{
		create: bc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Balance.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (bc *BalanceCreate) OnConflictColumns(columns ...string) *BalanceUpsertOne {
	bc.conflict = append(bc.conflict, sql.ConflictColumns(columns...))
	return &BalanceUpsertOne{
		create: bc,
	}
}

type (
	// BalanceUpsertOne is the builder for "upsert"-ing
	//  one Balance node.
	BalanceUpsertOne struct {
		create *BalanceCreate
	}

	// BalanceUpsert is the "OnConflict" setter.
	BalanceUpsert struct {
		*sql.UpdateSet
	}
)

// SetBalance sets the "balance" field.
func (u *BalanceUpsert) SetBalance(v big.Int) *BalanceUpsert {
	u.Set(balance.FieldBalance, v)
	return u
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *BalanceUpsert) UpdateBalance() *BalanceUpsert {
	u.SetExcluded(balance.FieldBalance)
	return u
}

// AddBalance adds v to the "balance" field.
func (u *BalanceUpsert) AddBalance(v big.Int) *BalanceUpsert {
	u.Add(balance.FieldBalance, v)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Balance.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(balance.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *BalanceUpsertOne) UpdateNewValues() *BalanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(balance.FieldID)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Balance.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *BalanceUpsertOne) Ignore() *BalanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BalanceUpsertOne) DoNothing() *BalanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BalanceCreate.OnConflict
// documentation for more info.
func (u *BalanceUpsertOne) Update(set func(*BalanceUpsert)) *BalanceUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BalanceUpsert{UpdateSet: update})
	}))
	return u
}

// SetBalance sets the "balance" field.
func (u *BalanceUpsertOne) SetBalance(v big.Int) *BalanceUpsertOne {
	return u.Update(func(s *BalanceUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *BalanceUpsertOne) AddBalance(v big.Int) *BalanceUpsertOne {
	return u.Update(func(s *BalanceUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *BalanceUpsertOne) UpdateBalance() *BalanceUpsertOne {
	return u.Update(func(s *BalanceUpsert) {
		s.UpdateBalance()
	})
}

// Exec executes the query.
func (u *BalanceUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BalanceCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BalanceUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *BalanceUpsertOne) ID(ctx context.Context) (id string, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: BalanceUpsertOne.ID is not supported by MySQL driver. Use BalanceUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *BalanceUpsertOne) IDX(ctx context.Context) string {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// BalanceCreateBulk is the builder for creating many Balance entities in bulk.
type BalanceCreateBulk struct {
	config
	builders []*BalanceCreate
	conflict []sql.ConflictOption
}

// Save creates the Balance entities in the database.
func (bcb *BalanceCreateBulk) Save(ctx context.Context) ([]*Balance, error) {
	specs := make([]*sqlgraph.CreateSpec, len(bcb.builders))
	nodes := make([]*Balance, len(bcb.builders))
	mutators := make([]Mutator, len(bcb.builders))
	for i := range bcb.builders {
		func(i int, root context.Context) {
			builder := bcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*BalanceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, bcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = bcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, bcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, bcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (bcb *BalanceCreateBulk) SaveX(ctx context.Context) []*Balance {
	v, err := bcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (bcb *BalanceCreateBulk) Exec(ctx context.Context) error {
	_, err := bcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (bcb *BalanceCreateBulk) ExecX(ctx context.Context) {
	if err := bcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Balance.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.BalanceUpsert) {
//			SetBalance(v+v).
//		}).
//		Exec(ctx)
//
func (bcb *BalanceCreateBulk) OnConflict(opts ...sql.ConflictOption) *BalanceUpsertBulk {
	bcb.conflict = opts
	return &BalanceUpsertBulk{
		create: bcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Balance.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (bcb *BalanceCreateBulk) OnConflictColumns(columns ...string) *BalanceUpsertBulk {
	bcb.conflict = append(bcb.conflict, sql.ConflictColumns(columns...))
	return &BalanceUpsertBulk{
		create: bcb,
	}
}

// BalanceUpsertBulk is the builder for "upsert"-ing
// a bulk of Balance nodes.
type BalanceUpsertBulk struct {
	create *BalanceCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Balance.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(balance.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *BalanceUpsertBulk) UpdateNewValues() *BalanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(balance.FieldID)
				return
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Balance.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *BalanceUpsertBulk) Ignore() *BalanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *BalanceUpsertBulk) DoNothing() *BalanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the BalanceCreateBulk.OnConflict
// documentation for more info.
func (u *BalanceUpsertBulk) Update(set func(*BalanceUpsert)) *BalanceUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&BalanceUpsert{UpdateSet: update})
	}))
	return u
}

// SetBalance sets the "balance" field.
func (u *BalanceUpsertBulk) SetBalance(v big.Int) *BalanceUpsertBulk {
	return u.Update(func(s *BalanceUpsert) {
		s.SetBalance(v)
	})
}

// AddBalance adds v to the "balance" field.
func (u *BalanceUpsertBulk) AddBalance(v big.Int) *BalanceUpsertBulk {
	return u.Update(func(s *BalanceUpsert) {
		s.AddBalance(v)
	})
}

// UpdateBalance sets the "balance" field to the value that was provided on create.
func (u *BalanceUpsertBulk) UpdateBalance() *BalanceUpsertBulk {
	return u.Update(func(s *BalanceUpsert) {
		s.UpdateBalance()
	})
}

// Exec executes the query.
func (u *BalanceUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the BalanceCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for BalanceCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *BalanceUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
