// Code generated by entc, DO NOT EDIT.

package block

import (
	"fmt"
	"io"
	"strconv"
)

const (
	// Label holds the string label denoting the block type in the database.
	Label = "block"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldBlockHash holds the string denoting the block_hash field in the database.
	FieldBlockHash = "block_hash"
	// FieldParentBlockHash holds the string denoting the parent_block_hash field in the database.
	FieldParentBlockHash = "parent_block_hash"
	// FieldBlockNumber holds the string denoting the block_number field in the database.
	FieldBlockNumber = "block_number"
	// FieldStateRoot holds the string denoting the state_root field in the database.
	FieldStateRoot = "state_root"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldTimestamp holds the string denoting the timestamp field in the database.
	FieldTimestamp = "timestamp"
	// EdgeTransactions holds the string denoting the transactions edge name in mutations.
	EdgeTransactions = "transactions"
	// EdgeTransactionReceipts holds the string denoting the transaction_receipts edge name in mutations.
	EdgeTransactionReceipts = "transaction_receipts"
	// Table holds the table name of the block in the database.
	Table = "blocks"
	// TransactionsTable is the table that holds the transactions relation/edge.
	TransactionsTable = "transactions"
	// TransactionsInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	TransactionsInverseTable = "transactions"
	// TransactionsColumn is the table column denoting the transactions relation/edge.
	TransactionsColumn = "block_transactions"
	// TransactionReceiptsTable is the table that holds the transaction_receipts relation/edge.
	TransactionReceiptsTable = "transaction_receipts"
	// TransactionReceiptsInverseTable is the table name for the TransactionReceipt entity.
	// It exists in this package in order to avoid circular dependency with the "transactionreceipt" package.
	TransactionReceiptsInverseTable = "transaction_receipts"
	// TransactionReceiptsColumn is the table column denoting the transaction_receipts relation/edge.
	TransactionReceiptsColumn = "block_transaction_receipts"
)

// Columns holds all SQL columns for block fields.
var Columns = []string{
	FieldID,
	FieldBlockHash,
	FieldParentBlockHash,
	FieldBlockNumber,
	FieldStateRoot,
	FieldStatus,
	FieldTimestamp,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusACCEPTED_ON_L1 Status = "ACCEPTED_ON_L1"
	StatusACCEPTED_ON_L2 Status = "ACCEPTED_ON_L2"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusACCEPTED_ON_L1, StatusACCEPTED_ON_L2:
		return nil
	default:
		return fmt.Errorf("block: invalid enum value for status field: %q", s)
	}
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Status) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Status) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Status(str)
	if err := StatusValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}
