// Code generated by entc, DO NOT EDIT.

package transactionreceipt

const (
	// Label holds the string label denoting the transactionreceipt type in the database.
	Label = "transaction_receipt"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTransactionIndex holds the string denoting the transaction_index field in the database.
	FieldTransactionIndex = "transaction_index"
	// FieldTransactionHash holds the string denoting the transaction_hash field in the database.
	FieldTransactionHash = "transaction_hash"
	// FieldL1ToL2ConsumedMessage holds the string denoting the l1_to_l2_consumed_message field in the database.
	FieldL1ToL2ConsumedMessage = "l1_to_l2_consumed_message"
	// FieldExecutionResources holds the string denoting the execution_resources field in the database.
	FieldExecutionResources = "execution_resources"
	// FieldEvents holds the string denoting the events field in the database.
	FieldEvents = "events"
	// FieldL2ToL1Messages holds the string denoting the l2_to_l1_messages field in the database.
	FieldL2ToL1Messages = "l2_to_l1_messages"
	// EdgeBlock holds the string denoting the block edge name in mutations.
	EdgeBlock = "block"
	// EdgeTransaction holds the string denoting the transaction edge name in mutations.
	EdgeTransaction = "transaction"
	// Table holds the table name of the transactionreceipt in the database.
	Table = "transaction_receipts"
	// BlockTable is the table that holds the block relation/edge.
	BlockTable = "transaction_receipts"
	// BlockInverseTable is the table name for the Block entity.
	// It exists in this package in order to avoid circular dependency with the "block" package.
	BlockInverseTable = "blocks"
	// BlockColumn is the table column denoting the block relation/edge.
	BlockColumn = "block_transaction_receipts"
	// TransactionTable is the table that holds the transaction relation/edge.
	TransactionTable = "transaction_receipts"
	// TransactionInverseTable is the table name for the Transaction entity.
	// It exists in this package in order to avoid circular dependency with the "transaction" package.
	TransactionInverseTable = "transactions"
	// TransactionColumn is the table column denoting the transaction relation/edge.
	TransactionColumn = "transaction_receipts"
)

// Columns holds all SQL columns for transactionreceipt fields.
var Columns = []string{
	FieldID,
	FieldTransactionIndex,
	FieldTransactionHash,
	FieldL1ToL2ConsumedMessage,
	FieldExecutionResources,
	FieldEvents,
	FieldL2ToL1Messages,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "transaction_receipts"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"block_transaction_receipts",
	"transaction_receipts",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
