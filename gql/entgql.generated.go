// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gql

import (
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/tarrencev/starknet-indexer/ent"
	"github.com/vektah/gqlparser/v2/ast"
)

// region    ************************** generated!.gotpl **************************

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _Block_id(ctx context.Context, field graphql.CollectedField, obj *ent.Block) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Block_id(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Block_id(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Block",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type ID does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Block_blockHash(ctx context.Context, field graphql.CollectedField, obj *ent.Block) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Block_blockHash(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlockHash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Block_blockHash(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Block",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Block_parentBlockHash(ctx context.Context, field graphql.CollectedField, obj *ent.Block) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Block_parentBlockHash(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ParentBlockHash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Block_parentBlockHash(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Block",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Block_blockNumber(ctx context.Context, field graphql.CollectedField, obj *ent.Block) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Block_blockNumber(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.BlockNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(uint64)
	fc.Result = res
	return ec.marshalNLong2uint64(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Block_blockNumber(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Block",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Long does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Block_stateRoot(ctx context.Context, field graphql.CollectedField, obj *ent.Block) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Block_stateRoot(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StateRoot, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Block_stateRoot(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Block",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Block_status(ctx context.Context, field graphql.CollectedField, obj *ent.Block) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Block_status(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Block_status(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Block",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type String does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _Block_timestamp(ctx context.Context, field graphql.CollectedField, obj *ent.Block) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_Block_timestamp(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2time·öêTime(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_Block_timestamp(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "Block",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Time does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlockConnection_edges(ctx context.Context, field graphql.CollectedField, obj *ent.BlockConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlockConnection_edges(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Edges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]*ent.BlockEdge)
	fc.Result = res
	return ec.marshalOBlockEdge2·öï·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêBlockEdge(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlockConnection_edges(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlockConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "node":
				return ec.fieldContext_BlockEdge_node(ctx, field)
			case "cursor":
				return ec.fieldContext_BlockEdge_cursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type BlockEdge", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlockConnection_pageInfo(ctx context.Context, field graphql.CollectedField, obj *ent.BlockConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlockConnection_pageInfo(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PageInfo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.PageInfo)
	fc.Result = res
	return ec.marshalNPageInfo2github·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêPageInfo(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlockConnection_pageInfo(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlockConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "hasNextPage":
				return ec.fieldContext_PageInfo_hasNextPage(ctx, field)
			case "hasPreviousPage":
				return ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
			case "startCursor":
				return ec.fieldContext_PageInfo_startCursor(ctx, field)
			case "endCursor":
				return ec.fieldContext_PageInfo_endCursor(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type PageInfo", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlockConnection_totalCount(ctx context.Context, field graphql.CollectedField, obj *ent.BlockConnection) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlockConnection_totalCount(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TotalCount, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlockConnection_totalCount(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlockConnection",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Int does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlockEdge_node(ctx context.Context, field graphql.CollectedField, obj *ent.BlockEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlockEdge_node(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Node, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Block)
	fc.Result = res
	return ec.marshalOBlock2·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêBlock(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlockEdge_node(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlockEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			switch field.Name {
			case "id":
				return ec.fieldContext_Block_id(ctx, field)
			case "blockHash":
				return ec.fieldContext_Block_blockHash(ctx, field)
			case "parentBlockHash":
				return ec.fieldContext_Block_parentBlockHash(ctx, field)
			case "blockNumber":
				return ec.fieldContext_Block_blockNumber(ctx, field)
			case "stateRoot":
				return ec.fieldContext_Block_stateRoot(ctx, field)
			case "status":
				return ec.fieldContext_Block_status(ctx, field)
			case "timestamp":
				return ec.fieldContext_Block_timestamp(ctx, field)
			}
			return nil, fmt.Errorf("no field named %q was found under type Block", field.Name)
		},
	}
	return fc, nil
}

func (ec *executionContext) _BlockEdge_cursor(ctx context.Context, field graphql.CollectedField, obj *ent.BlockEdge) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_BlockEdge_cursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(ent.Cursor)
	fc.Result = res
	return ec.marshalNCursor2github·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_BlockEdge_cursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "BlockEdge",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField, obj *ent.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasNextPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasNextPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasNextPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField, obj *ent.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_hasPreviousPage(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HasPreviousPage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_hasPreviousPage(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Boolean does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_startCursor(ctx context.Context, field graphql.CollectedField, obj *ent.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_startCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.StartCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Cursor)
	fc.Result = res
	return ec.marshalOCursor2·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_startCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

func (ec *executionContext) _PageInfo_endCursor(ctx context.Context, field graphql.CollectedField, obj *ent.PageInfo) (ret graphql.Marshaler) {
	fc, err := ec.fieldContext_PageInfo_endCursor(ctx, field)
	if err != nil {
		return graphql.Null
	}
	ctx = graphql.WithFieldContext(ctx, fc)
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndCursor, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*ent.Cursor)
	fc.Result = res
	return ec.marshalOCursor2·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêCursor(ctx, field.Selections, res)
}

func (ec *executionContext) fieldContext_PageInfo_endCursor(ctx context.Context, field graphql.CollectedField) (fc *graphql.FieldContext, err error) {
	fc = &graphql.FieldContext{
		Object:     "PageInfo",
		Field:      field,
		IsMethod:   false,
		IsResolver: false,
		Child: func(ctx context.Context, field graphql.CollectedField) (*graphql.FieldContext, error) {
			return nil, errors.New("field of type Cursor does not have child fields")
		},
	}
	return fc, nil
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputBlockOrder(ctx context.Context, obj interface{}) (ent.BlockOrder, error) {
	var it ent.BlockOrder
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	if _, present := asMap["direction"]; !present {
		asMap["direction"] = "ASC"
	}

	for k, v := range asMap {
		switch k {
		case "direction":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("direction"))
			it.Direction, err = ec.unmarshalNOrderDirection2github·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêOrderDirection(ctx, v)
			if err != nil {
				return it, err
			}
		case "field":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("field"))
			it.Field, err = ec.unmarshalNBlockOrderField2·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêBlockOrderField(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputBlockWhereInput(ctx context.Context, obj interface{}) (BlockWhereInput, error) {
	var it BlockWhereInput
	asMap := map[string]interface{}{}
	for k, v := range obj.(map[string]interface{}) {
		asMap[k] = v
	}

	for k, v := range asMap {
		switch k {
		case "not":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("not"))
			it.Not, err = ec.unmarshalOBlockWhereInput2·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãgql·öêBlockWhereInput(ctx, v)
			if err != nil {
				return it, err
			}
		case "and":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("and"))
			it.And, err = ec.unmarshalOBlockWhereInput2·öï·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãgql·öêBlockWhereInput·öÑ(ctx, v)
			if err != nil {
				return it, err
			}
		case "or":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("or"))
			it.Or, err = ec.unmarshalOBlockWhereInput2·öï·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãgql·öêBlockWhereInput·öÑ(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockHash":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockHash"))
			it.BlockHash, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockHashNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockHashNEQ"))
			it.BlockHashNeq, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockHashIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockHashIn"))
			it.BlockHashIn, err = ec.unmarshalOString2·öïstring·öÑ(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockHashNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockHashNotIn"))
			it.BlockHashNotIn, err = ec.unmarshalOString2·öïstring·öÑ(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockHashGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockHashGT"))
			it.BlockHashGt, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockHashGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockHashGTE"))
			it.BlockHashGte, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockHashLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockHashLT"))
			it.BlockHashLt, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockHashLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockHashLTE"))
			it.BlockHashLte, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockHashContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockHashContains"))
			it.BlockHashContains, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockHashHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockHashHasPrefix"))
			it.BlockHashHasPrefix, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockHashHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockHashHasSuffix"))
			it.BlockHashHasSuffix, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockHashEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockHashEqualFold"))
			it.BlockHashEqualFold, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockHashContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockHashContainsFold"))
			it.BlockHashContainsFold, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentBlockHash":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentBlockHash"))
			it.ParentBlockHash, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentBlockHashNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentBlockHashNEQ"))
			it.ParentBlockHashNeq, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentBlockHashIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentBlockHashIn"))
			it.ParentBlockHashIn, err = ec.unmarshalOString2·öïstring·öÑ(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentBlockHashNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentBlockHashNotIn"))
			it.ParentBlockHashNotIn, err = ec.unmarshalOString2·öïstring·öÑ(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentBlockHashGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentBlockHashGT"))
			it.ParentBlockHashGt, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentBlockHashGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentBlockHashGTE"))
			it.ParentBlockHashGte, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentBlockHashLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentBlockHashLT"))
			it.ParentBlockHashLt, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentBlockHashLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentBlockHashLTE"))
			it.ParentBlockHashLte, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentBlockHashContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentBlockHashContains"))
			it.ParentBlockHashContains, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentBlockHashHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentBlockHashHasPrefix"))
			it.ParentBlockHashHasPrefix, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentBlockHashHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentBlockHashHasSuffix"))
			it.ParentBlockHashHasSuffix, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentBlockHashEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentBlockHashEqualFold"))
			it.ParentBlockHashEqualFold, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "parentBlockHashContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("parentBlockHashContainsFold"))
			it.ParentBlockHashContainsFold, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockNumber"))
			it.BlockNumber, err = ec.unmarshalOLong2·öñuint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockNumberNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockNumberNEQ"))
			it.BlockNumberNeq, err = ec.unmarshalOLong2·öñuint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockNumberIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockNumberIn"))
			it.BlockNumberIn, err = ec.unmarshalOLong2·öïuint64·öÑ(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockNumberNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockNumberNotIn"))
			it.BlockNumberNotIn, err = ec.unmarshalOLong2·öïuint64·öÑ(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockNumberGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockNumberGT"))
			it.BlockNumberGt, err = ec.unmarshalOLong2·öñuint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockNumberGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockNumberGTE"))
			it.BlockNumberGte, err = ec.unmarshalOLong2·öñuint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockNumberLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockNumberLT"))
			it.BlockNumberLt, err = ec.unmarshalOLong2·öñuint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "blockNumberLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("blockNumberLTE"))
			it.BlockNumberLte, err = ec.unmarshalOLong2·öñuint64(ctx, v)
			if err != nil {
				return it, err
			}
		case "stateRoot":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateRoot"))
			it.StateRoot, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stateRootNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateRootNEQ"))
			it.StateRootNeq, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stateRootIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateRootIn"))
			it.StateRootIn, err = ec.unmarshalOString2·öïstring·öÑ(ctx, v)
			if err != nil {
				return it, err
			}
		case "stateRootNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateRootNotIn"))
			it.StateRootNotIn, err = ec.unmarshalOString2·öïstring·öÑ(ctx, v)
			if err != nil {
				return it, err
			}
		case "stateRootGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateRootGT"))
			it.StateRootGt, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stateRootGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateRootGTE"))
			it.StateRootGte, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stateRootLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateRootLT"))
			it.StateRootLt, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stateRootLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateRootLTE"))
			it.StateRootLte, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stateRootContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateRootContains"))
			it.StateRootContains, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stateRootHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateRootHasPrefix"))
			it.StateRootHasPrefix, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stateRootHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateRootHasSuffix"))
			it.StateRootHasSuffix, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stateRootEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateRootEqualFold"))
			it.StateRootEqualFold, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "stateRootContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("stateRootContainsFold"))
			it.StateRootContainsFold, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "status":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
			it.Status, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNEQ"))
			it.StatusNeq, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusIn"))
			it.StatusIn, err = ec.unmarshalOString2·öïstring·öÑ(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusNotIn"))
			it.StatusNotIn, err = ec.unmarshalOString2·öïstring·öÑ(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusGT"))
			it.StatusGt, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusGTE"))
			it.StatusGte, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusLT"))
			it.StatusLt, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusLTE"))
			it.StatusLte, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusContains":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusContains"))
			it.StatusContains, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusHasPrefix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusHasPrefix"))
			it.StatusHasPrefix, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusHasSuffix":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusHasSuffix"))
			it.StatusHasSuffix, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusEqualFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusEqualFold"))
			it.StatusEqualFold, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "statusContainsFold":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("statusContainsFold"))
			it.StatusContainsFold, err = ec.unmarshalOString2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "timestamp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestamp"))
			it.Timestamp, err = ec.unmarshalOTime2·öñtime·öêTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timestampNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampNEQ"))
			it.TimestampNeq, err = ec.unmarshalOTime2·öñtime·öêTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timestampIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampIn"))
			it.TimestampIn, err = ec.unmarshalOTime2·öï·öñtime·öêTime·öÑ(ctx, v)
			if err != nil {
				return it, err
			}
		case "timestampNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampNotIn"))
			it.TimestampNotIn, err = ec.unmarshalOTime2·öï·öñtime·öêTime·öÑ(ctx, v)
			if err != nil {
				return it, err
			}
		case "timestampGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampGT"))
			it.TimestampGt, err = ec.unmarshalOTime2·öñtime·öêTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timestampGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampGTE"))
			it.TimestampGte, err = ec.unmarshalOTime2·öñtime·öêTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timestampLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampLT"))
			it.TimestampLt, err = ec.unmarshalOTime2·öñtime·öêTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "timestampLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestampLTE"))
			it.TimestampLte, err = ec.unmarshalOTime2·öñtime·öêTime(ctx, v)
			if err != nil {
				return it, err
			}
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalOID2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNEQ":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNEQ"))
			it.IDNeq, err = ec.unmarshalOID2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idIn"))
			it.IDIn, err = ec.unmarshalOID2·öïstring·öÑ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idNotIn":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idNotIn"))
			it.IDNotIn, err = ec.unmarshalOID2·öïstring·öÑ(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGT"))
			it.IDGt, err = ec.unmarshalOID2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idGTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idGTE"))
			it.IDGte, err = ec.unmarshalOID2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLT":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLT"))
			it.IDLt, err = ec.unmarshalOID2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "idLTE":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("idLTE"))
			it.IDLte, err = ec.unmarshalOID2·öñstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) _Node(ctx context.Context, sel ast.SelectionSet, obj ent.Noder) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case *ent.Block:
		if obj == nil {
			return graphql.Null
		}
		return ec._Block(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var blockImplementors = []string{"Block", "Node"}

func (ec *executionContext) _Block(ctx context.Context, sel ast.SelectionSet, obj *ent.Block) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blockImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Block")
		case "id":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Block_id(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "blockHash":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Block_blockHash(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "parentBlockHash":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Block_parentBlockHash(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "blockNumber":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Block_blockNumber(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "stateRoot":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Block_stateRoot(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Block_status(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "timestamp":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._Block_timestamp(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blockConnectionImplementors = []string{"BlockConnection"}

func (ec *executionContext) _BlockConnection(ctx context.Context, sel ast.SelectionSet, obj *ent.BlockConnection) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blockConnectionImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlockConnection")
		case "edges":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._BlockConnection_edges(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "pageInfo":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._BlockConnection_pageInfo(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "totalCount":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._BlockConnection_totalCount(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var blockEdgeImplementors = []string{"BlockEdge"}

func (ec *executionContext) _BlockEdge(ctx context.Context, sel ast.SelectionSet, obj *ent.BlockEdge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, blockEdgeImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("BlockEdge")
		case "node":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._BlockEdge_node(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "cursor":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._BlockEdge_cursor(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var pageInfoImplementors = []string{"PageInfo"}

func (ec *executionContext) _PageInfo(ctx context.Context, sel ast.SelectionSet, obj *ent.PageInfo) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, pageInfoImplementors)
	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("PageInfo")
		case "hasNextPage":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PageInfo_hasNextPage(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hasPreviousPage":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PageInfo_hasPreviousPage(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "startCursor":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PageInfo_startCursor(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		case "endCursor":
			innerFunc := func(ctx context.Context) (res graphql.Marshaler) {
				return ec._PageInfo_endCursor(ctx, field, obj)
			}

			out.Values[i] = innerFunc(ctx)

		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) unmarshalNBlockOrderField2·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêBlockOrderField(ctx context.Context, v interface{}) (*ent.BlockOrderField, error) {
	var res = new(ent.BlockOrderField)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBlockOrderField2·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêBlockOrderField(ctx context.Context, sel ast.SelectionSet, v *ent.BlockOrderField) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalNBlockWhereInput2·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãgql·öêBlockWhereInput(ctx context.Context, v interface{}) (*BlockWhereInput, error) {
	res, err := ec.unmarshalInputBlockWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNCursor2github·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêCursor(ctx context.Context, v interface{}) (ent.Cursor, error) {
	var res ent.Cursor
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNCursor2github·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêCursor(ctx context.Context, sel ast.SelectionSet, v ent.Cursor) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNNode2·öïgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêNoder(ctx context.Context, sel ast.SelectionSet, v []ent.Noder) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalONode2github·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêNoder(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) unmarshalNOrderDirection2github·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêOrderDirection(ctx context.Context, v interface{}) (ent.OrderDirection, error) {
	var res ent.OrderDirection
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNOrderDirection2github·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêOrderDirection(ctx context.Context, sel ast.SelectionSet, v ent.OrderDirection) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNPageInfo2github·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêPageInfo(ctx context.Context, sel ast.SelectionSet, v ent.PageInfo) graphql.Marshaler {
	return ec._PageInfo(ctx, sel, &v)
}

func (ec *executionContext) marshalOBlock2·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêBlock(ctx context.Context, sel ast.SelectionSet, v *ent.Block) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Block(ctx, sel, v)
}

func (ec *executionContext) marshalOBlockConnection2·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêBlockConnection(ctx context.Context, sel ast.SelectionSet, v *ent.BlockConnection) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BlockConnection(ctx, sel, v)
}

func (ec *executionContext) marshalOBlockEdge2·öï·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêBlockEdge(ctx context.Context, sel ast.SelectionSet, v []*ent.BlockEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOBlockEdge2·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêBlockEdge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()

	return ret
}

func (ec *executionContext) marshalOBlockEdge2·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêBlockEdge(ctx context.Context, sel ast.SelectionSet, v *ent.BlockEdge) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._BlockEdge(ctx, sel, v)
}

func (ec *executionContext) unmarshalOBlockOrder2·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêBlockOrder(ctx context.Context, v interface{}) (*ent.BlockOrder, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlockOrder(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOBlockWhereInput2·öï·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãgql·öêBlockWhereInput·öÑ(ctx context.Context, v interface{}) ([]*BlockWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		vSlice = graphql.CoerceList(v)
	}
	var err error
	res := make([]*BlockWhereInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNBlockWhereInput2·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãgql·öêBlockWhereInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOBlockWhereInput2·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãgql·öêBlockWhereInput(ctx context.Context, v interface{}) (*BlockWhereInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputBlockWhereInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOCursor2·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêCursor(ctx context.Context, v interface{}) (*ent.Cursor, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(ent.Cursor)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOCursor2·öñgithub·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêCursor(ctx context.Context, sel ast.SelectionSet, v *ent.Cursor) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalONode2github·öócom·öãtarrencev·öãstarknet·öëindexer·öãent·öêNoder(ctx context.Context, sel ast.SelectionSet, v ent.Noder) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._Node(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
