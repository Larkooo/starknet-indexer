scalar Time
scalar Long
scalar JSON
scalar Felt

type L1Message {
  toAddress: String!
  payload: [Felt!]
}

type L2Message {
  fromAddress: String!
  payload: [Felt!]
}

extend type TransactionReceipt {
  messagesSent: [L1Message]!
}

type Query {
  node(id: ID!): Node
  nodes(ids: [ID!]!): [Node]!
  blocks(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    orderBy: BlockOrder
    where: BlockWhereInput
  ): BlockConnection
  events(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    where: EventWhereInput
  ): EventConnection
  transactions(
    after: Cursor
    first: Int
    before: Cursor
    last: Int
    where: TransactionWhereInput
  ): TransactionConnection
}

type Subscription {
  watchEvent(address: String!, keys: [Felt!]): Event
}
