// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package indexer

import (
	"time"
)

// BlockWhereInput is used for filtering Block objects.
// Input was generated by ent.
type BlockWhereInput struct {
	Not *BlockWhereInput   `json:"not"`
	And []*BlockWhereInput `json:"and"`
	Or  []*BlockWhereInput `json:"or"`
	// block_hash field predicates
	BlockHash             *string  `json:"blockHash"`
	BlockHashNeq          *string  `json:"blockHashNEQ"`
	BlockHashIn           []string `json:"blockHashIn"`
	BlockHashNotIn        []string `json:"blockHashNotIn"`
	BlockHashGt           *string  `json:"blockHashGT"`
	BlockHashGte          *string  `json:"blockHashGTE"`
	BlockHashLt           *string  `json:"blockHashLT"`
	BlockHashLte          *string  `json:"blockHashLTE"`
	BlockHashContains     *string  `json:"blockHashContains"`
	BlockHashHasPrefix    *string  `json:"blockHashHasPrefix"`
	BlockHashHasSuffix    *string  `json:"blockHashHasSuffix"`
	BlockHashEqualFold    *string  `json:"blockHashEqualFold"`
	BlockHashContainsFold *string  `json:"blockHashContainsFold"`
	// parent_block_hash field predicates
	ParentBlockHash             *string  `json:"parentBlockHash"`
	ParentBlockHashNeq          *string  `json:"parentBlockHashNEQ"`
	ParentBlockHashIn           []string `json:"parentBlockHashIn"`
	ParentBlockHashNotIn        []string `json:"parentBlockHashNotIn"`
	ParentBlockHashGt           *string  `json:"parentBlockHashGT"`
	ParentBlockHashGte          *string  `json:"parentBlockHashGTE"`
	ParentBlockHashLt           *string  `json:"parentBlockHashLT"`
	ParentBlockHashLte          *string  `json:"parentBlockHashLTE"`
	ParentBlockHashContains     *string  `json:"parentBlockHashContains"`
	ParentBlockHashHasPrefix    *string  `json:"parentBlockHashHasPrefix"`
	ParentBlockHashHasSuffix    *string  `json:"parentBlockHashHasSuffix"`
	ParentBlockHashEqualFold    *string  `json:"parentBlockHashEqualFold"`
	ParentBlockHashContainsFold *string  `json:"parentBlockHashContainsFold"`
	// block_number field predicates
	BlockNumber      *uint64  `json:"blockNumber"`
	BlockNumberNeq   *uint64  `json:"blockNumberNEQ"`
	BlockNumberIn    []uint64 `json:"blockNumberIn"`
	BlockNumberNotIn []uint64 `json:"blockNumberNotIn"`
	BlockNumberGt    *uint64  `json:"blockNumberGT"`
	BlockNumberGte   *uint64  `json:"blockNumberGTE"`
	BlockNumberLt    *uint64  `json:"blockNumberLT"`
	BlockNumberLte   *uint64  `json:"blockNumberLTE"`
	// state_root field predicates
	StateRoot             *string  `json:"stateRoot"`
	StateRootNeq          *string  `json:"stateRootNEQ"`
	StateRootIn           []string `json:"stateRootIn"`
	StateRootNotIn        []string `json:"stateRootNotIn"`
	StateRootGt           *string  `json:"stateRootGT"`
	StateRootGte          *string  `json:"stateRootGTE"`
	StateRootLt           *string  `json:"stateRootLT"`
	StateRootLte          *string  `json:"stateRootLTE"`
	StateRootContains     *string  `json:"stateRootContains"`
	StateRootHasPrefix    *string  `json:"stateRootHasPrefix"`
	StateRootHasSuffix    *string  `json:"stateRootHasSuffix"`
	StateRootEqualFold    *string  `json:"stateRootEqualFold"`
	StateRootContainsFold *string  `json:"stateRootContainsFold"`
	// status field predicates
	Status             *string  `json:"status"`
	StatusNeq          *string  `json:"statusNEQ"`
	StatusIn           []string `json:"statusIn"`
	StatusNotIn        []string `json:"statusNotIn"`
	StatusGt           *string  `json:"statusGT"`
	StatusGte          *string  `json:"statusGTE"`
	StatusLt           *string  `json:"statusLT"`
	StatusLte          *string  `json:"statusLTE"`
	StatusContains     *string  `json:"statusContains"`
	StatusHasPrefix    *string  `json:"statusHasPrefix"`
	StatusHasSuffix    *string  `json:"statusHasSuffix"`
	StatusEqualFold    *string  `json:"statusEqualFold"`
	StatusContainsFold *string  `json:"statusContainsFold"`
	// timestamp field predicates
	Timestamp      *time.Time   `json:"timestamp"`
	TimestampNeq   *time.Time   `json:"timestampNEQ"`
	TimestampIn    []*time.Time `json:"timestampIn"`
	TimestampNotIn []*time.Time `json:"timestampNotIn"`
	TimestampGt    *time.Time   `json:"timestampGT"`
	TimestampGte   *time.Time   `json:"timestampGTE"`
	TimestampLt    *time.Time   `json:"timestampLT"`
	TimestampLte   *time.Time   `json:"timestampLTE"`
	// id field predicates
	ID      *string  `json:"id"`
	IDNeq   *string  `json:"idNEQ"`
	IDIn    []string `json:"idIn"`
	IDNotIn []string `json:"idNotIn"`
	IDGt    *string  `json:"idGT"`
	IDGte   *string  `json:"idGTE"`
	IDLt    *string  `json:"idLT"`
	IDLte   *string  `json:"idLTE"`
}
