directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
type Block implements Node {
  id: ID!
  blockHash: String!
  parentBlockHash: String!
  blockNumber: Long!
  stateRoot: String!
  status: String!
  timestamp: Time!
}
"""A connection to a list of items."""
type BlockConnection {
  """A list of edges."""
  edges: [BlockEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  totalCount: Int!
}
"""An edge in a connection."""
type BlockEdge {
  """The item at the end of the edge."""
  node: Block
  """A cursor for use in pagination."""
  cursor: Cursor!
}
input BlockOrder {
  direction: OrderDirection! = ASC
  field: BlockOrderField!
}
enum BlockOrderField {
  TIMESTAMP
}
"""
BlockWhereInput is used for filtering Block objects.
Input was generated by ent.
"""
input BlockWhereInput {
  not: BlockWhereInput
  and: [BlockWhereInput!]
  or: [BlockWhereInput!]
  """block_hash field predicates"""
  blockHash: String
  blockHashNEQ: String
  blockHashIn: [String!]
  blockHashNotIn: [String!]
  blockHashGT: String
  blockHashGTE: String
  blockHashLT: String
  blockHashLTE: String
  blockHashContains: String
  blockHashHasPrefix: String
  blockHashHasSuffix: String
  blockHashEqualFold: String
  blockHashContainsFold: String
  """parent_block_hash field predicates"""
  parentBlockHash: String
  parentBlockHashNEQ: String
  parentBlockHashIn: [String!]
  parentBlockHashNotIn: [String!]
  parentBlockHashGT: String
  parentBlockHashGTE: String
  parentBlockHashLT: String
  parentBlockHashLTE: String
  parentBlockHashContains: String
  parentBlockHashHasPrefix: String
  parentBlockHashHasSuffix: String
  parentBlockHashEqualFold: String
  parentBlockHashContainsFold: String
  """block_number field predicates"""
  blockNumber: Long
  blockNumberNEQ: Long
  blockNumberIn: [Long!]
  blockNumberNotIn: [Long!]
  blockNumberGT: Long
  blockNumberGTE: Long
  blockNumberLT: Long
  blockNumberLTE: Long
  """state_root field predicates"""
  stateRoot: String
  stateRootNEQ: String
  stateRootIn: [String!]
  stateRootNotIn: [String!]
  stateRootGT: String
  stateRootGTE: String
  stateRootLT: String
  stateRootLTE: String
  stateRootContains: String
  stateRootHasPrefix: String
  stateRootHasSuffix: String
  stateRootEqualFold: String
  stateRootContainsFold: String
  """status field predicates"""
  status: String
  statusNEQ: String
  statusIn: [String!]
  statusNotIn: [String!]
  statusGT: String
  statusGTE: String
  statusLT: String
  statusLTE: String
  statusContains: String
  statusHasPrefix: String
  statusHasSuffix: String
  statusEqualFold: String
  statusContainsFold: String
  """timestamp field predicates"""
  timestamp: Time
  timestampNEQ: Time
  timestampIn: [Time!]
  timestampNotIn: [Time!]
  timestampGT: Time
  timestampGTE: Time
  timestampLT: Time
  timestampLTE: Time
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node {
  """The id of the object."""
  id: ID!
}
enum OrderDirection {
  ASC
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
